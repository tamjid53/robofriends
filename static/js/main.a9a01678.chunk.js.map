{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","email","username","id","name","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wQAmBeA,EAhBF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAChC,OAEI,cADA,CACA,OAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,sBAAKA,GAAG,YAAR,UACI,6BAAKC,IACL,8BAAIF,EACA,uBACCD,YCYLO,EApBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIT,GAAIM,EAAOG,GAAGT,GACdC,KAAMK,EAAOG,GAAGR,KAChBF,SAAUO,EAAOG,GAAGV,SACpBD,MAAOQ,EAAOG,GAAGX,OAJZU,EAAKR,UCGnBU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,8BACI,uBACIT,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCkDJC,G,wDA/CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhBzC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IALP,E,qDASd,WAAoB,IAAD,OAEfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACnB,OAAQ4B,S,oBAS1C,WAEI,MAA8BC,KAAKN,MAA5BvB,EAAP,EAAOA,OAAQoB,EAAf,EAAeA,YAETU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACjC,OAAOA,EAAMrC,KAAKsC,cAAcC,SAASd,EAAYa,kBAIzD,OAAQjC,EAAOmC,OAGV,sBAAKvC,UAAU,KAAf,UACG,oBAAIA,UAAU,iBAAd,yBAGA,cAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC1B,cAAC,EAAD,UACI,cAAC,EAAD,CAAUjB,OAAQ8B,SAR9B,6C,GAjCMM,IAAMC,YCITC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACT,cAAC,EAAD,IACEC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.a9a01678.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = ({email, username, id, name}) => {\r\n    return (\r\n        //This html like syntax is JSX\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div id='word-wrap'>\r\n                <h2>{name}</h2>\r\n                <p>{username}\r\n                    <br></br>\r\n                    {email}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n//Created a CardList component that list cards\r\nconst CardList = ({robots}) => {\r\n    //Looping through each user from './robots.js' and returning values\r\n    return (\r\n        <div>\r\n            {\r\n            robots.map((user, i) => {\r\n                return (\r\n                    <Card\r\n                        key={user.id}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        username={robots[i].username}\r\n                        email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n export default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\"\r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Creating a scroll bar using styling inside the div then accessing the 'Scroll' child located in './App.js'\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '550px'}}>\r\n            {props.children}\r\n        </div> \r\n    );   \r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll.js';\r\nimport './App.css';\r\n\r\n//React lifecycle methods\r\n//Changed the function to a class syntax to use 'this.state'\r\nclass App extends React.Component{\r\n    constructor() {\r\n        super()\r\n        //Two states used to render and pass to props to these components\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        //fetching the website json data\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n        \r\n    }\r\n\r\n    //A function that I made that shows what is being typed on the search bar\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        //Destructing\r\n        const {robots, searchfield} = this.state;\r\n        //With the information from the CardList, filter robots according to what is inputted in the search bar\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        //If you have multiple users and it takes a while to load the page, you can do an if statement that states the page is loading\r\n        //Using ternary\r\n        return !robots.length ?\r\n            <h1>Loading</h1> :\r\n            (\r\n             <div className=\"tc\">\r\n                <h1 className=\"f1 light-green\">\r\n                    RoboFriends \r\n                </h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots} />\r\n                    </Scroll>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n<App />\n, document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}